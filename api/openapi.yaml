openapi: 3.0.3
info:
  title: Minimal Backend API
  version: 0.1.0
  description: Minimal OpenAPI spec with health and auth login.
servers:
  - url: http://localhost:3000
paths:
  /health:
    get:
      tags: [System]
      summary: Health check
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
  /auth/login:
    post:
      tags: [Auth]
      summary: Login to obtain an access token
      operationId: postAuthLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request or credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    HealthStatus:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [ok]
        uptime:
          type: number
          format: float
          description: Seconds the service has been running
        version:
          type: string
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          format: password
          minLength: 1
    LoginResponse:
      type: object
      required: [access_token, token_type]
      properties:
        access_token:
          type: string
          description: Opaque token or JWT
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          minimum: 1
          description: Seconds until expiration
    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
